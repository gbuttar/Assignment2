------------------
-- Lambda Calculus
------------------

Prog.   Program ::= Exp ;
EAbs.   Exp1 ::= "\\" Id "." Exp ;
EApp.   Exp2 ::= Exp2 Exp3 ;
ENat0.  Exp3 ::= "0" ;
ENatS.  Exp3 ::= "S" Exp3 ; -- "S" is now a 'terminal symbol' and cannot be parsed as an identifier
EVar.   Exp4 ::= Id ;

coercions Exp 4 ;


-- (\x.Sx)(S(SO))*->
-- add feature: grammar ...interpreter....encode the new feature in terms of old ones orrr add computational rules
-- coercions Exp 3 ;

token Id (letter (letter | digit | '_')*) ; -- Identifiers start with a letter followed by any number of letters, digits, or underscores

comment "//" ;
comment "/*" "*/" ;
