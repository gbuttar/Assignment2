------------------
-- Lambda Calculus
------------------

Prog.   Program ::= Exp ; -- this first line is redundant
EAbs.   Exp1 ::= "\\" Id "." Exp ;  -- in effect: "\" Id "." Exp ; -- btw, pronounce "\" as "lambda" in this context
EApp.   Exp2 ::= Exp2 Exp3 ; -- application associates on the left
ENat1.  Exp3 ::= "0" ;
ENatS.  Exp3 ::= "S" Exp3;
EVar.   Exp4 ::= Id ;


-- (\x.Sx)(S(SO))*->
-- add feature: grammar ...interpreter....encode the new feature in terms of old ones orrr add computational rules
-- coercions Exp 3 ;

token Id (letter (letter | digit | '_')*) ; -- Identifiers start with a letter followed by any number of letters, digits, or underscores

comment "//" ;
comment "/*" "*/" ;
